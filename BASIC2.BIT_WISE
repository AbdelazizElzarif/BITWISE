(1) Write a program that reads the radius of a circle and 
calculates the area and circumference.
float area_circular(float r)
{
	float area;
	area=3.14*r*r;
	return area;
}
(2) Write a C program to take a number and a character 
from user if the number is even print the same 
character, if the number is odd print the other case of 
the character (a->A, B->b)
char num_char(int num,char ch)
{  
   char c=ch;
   if(num&1)
   {
      if(c>='a'&&c<='z')
	  {
	      c=c-'a'+'A';
	  }
	  else
	  {
	     c=c-'A'+'a';
	  }
   }
   return ch;
}
(3) Write a program to reverse a number in decimal 
representation (1205->5021).
int reverse_digit_decimal(int num)
{
	int r_num=0;
	while(num)
	{
		r_num=r_num*10+num%10;
		num=num/10;
	}
	return r_num;	
}
(4) Write a program to count the number of 1â€™s in an 
unsigned 32-bit integer
int numper_of_one(int num)
{
	int count=0;
	while(num)
	{
		count+=num&1;
		num>>=1;
	}
	return count;
}
(5) write a program to print the binary representation of a 
number, try not to print zeros on the left (5->print 101
void decimal_to_binary_without_zero_left(int num)
{
	char bit;
	char i;
	char flag=0;
	for(i=31;i>=0;i--)
	{
		bit=(num>>i)&1;
		if(bit==1)
		{
			printf("%d",bit);
			flag=1;
		}
		else
		{
			if(flag==1)
			{
				printf("%d",bit);
			}
		}
			
	}
	printf("\n");
}
(6) Write c code to reverse bits in an 8-bit number 
(149->10010101 return 169->10101001),
(5->00000101 return 160->10100000)
int reverse_bit(int num)
{
	int f_bit=0;
	int l_bit=7;
	while(f_bit<=l_bit)
	{
	if(((num>>f_bit)&1)!=((num>>l_bit)&1))
	{
		num=num^(1<<f_bit);
		num=num^(1<<l_bit);
	}
	f_bit++;
	l_bit--;
	}
	return num;
}
(7) Write c code to sum numbers from 1 to any num (without 
loop)
int sum_num(char num)
{
    return (num*(num+1))/2;
}

(8) Write a full C program to take 4 choose from user:
1-Set bit. 
2-Clear bit 
3-Toggle bit.
4-Read bit.
/* ********set bit ***** */
void set_bit(int *num,int nofbit)
{
	*num=*num|(1<<nofbit);
}
void clear_bit(int *num,int nofbit)
{
	*num=*num&(~(1<<nofbit));
}
void toggle_bit(int *num,int nofbit)
{
	*num=*num^(1<<nofbit);

}
char read_bit(int num,int nofbit)
{
	int bit;
	bit=(num>>nofbit)&1;
	return bit;
}
(10) Write c function to count the max number of zeros 
between two ones in the binary representation of a 
number (296384-> {1001000010111000000} return 4)
int numper_of_ones_between_zero(int num)
{
	int flag=0;
	int count=0;
	int max=0;
	while(num)
	{
		if(num&1)
		{
			flag=1;
			if(count>max)
			{
				max=count;
			}
			count=0;
		}
		else
		{
			if(flag==1)
			{
				count++;
			}
		}
		num=num>>1;
	}
	return max;
}
(11) Given two integers: L and R, Find the maximal value of A 
xor B where A and B satisfy the condition L =< A <= B <= 
R Constrains: 1 <= L <= R <= 1000 Input format: the 
input contains two lines first line contains L and next 
line contains R. Output format: The maximum value of 
Axor B
int max_xor(int num1,int num2)
{
	int i,j;
	int temp;
	int max_xor=0;
	int xor=0;
	if(num1>num2)
	{
		temp=num1;
		num1=num2;
		num2=temp;
	}
	for(i=num1;i<=num2;i++)
	{
		for(j=i;j<=num2;j++)
		{
			xor=(i^j);
			if(xor>max_xor)
			{
				max_xor=xor;
			}
		}
	}
	return max_xor;
}